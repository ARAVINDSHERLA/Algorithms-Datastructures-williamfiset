
Related to the topic of topological orderings is the topic of shortest and longest paths on directed acyclic graphs.

Recall that a directed acyclic graph is a graph with directed edges and NO cycles. By definition this means all trees are automatically DAGs since they do not contain any cycles.

Here is a graph, my question to you is: Is this graph a directed a cyclic graph?

The answer is yes it is!

What about this structure? I'll give u a moment to think about it.

The answer is no because this graph has undirected edges not directed edges. The graph may be a tree but directed edges are a requirement for a DAG.

What's really great about working with a DAG is that the SSSP problem can be solved very efficently in linear time. The next fastest SSSP algorithm is dijkstras algorithm which may not work if there are negative edge weights, this algorithm i'm about to show you doesn't care about  positive or negative edge weights. The essense of the algorithm is that it finds a topological ordering on the graph using the topsort algorithm we saw in the last video and processes each node sequentially to get the shortest path by relaxing each edge as it's seen. Relaxing an edge simply means updating to a better value if a shorter path can be obtained using the current edge.

Suppose this is the graph we're working with. You can verify that it is in fact a DAG. What we wish to do is find the shortest path from node A to all other nodes in the graph. In order to do this the first thing we'll want to do is generate a topological ordering of the nodes of this graph using the topsort algorithm.

Below I have selected an arbitrary topological ordering which is the order we will process the nodes of this graph in. I am also displaying the current best distance to each node at the bottom of the screen which are all currently infinity.

The first step of our algorithm is to set the distance to our starting node to be zero. In this case since A is the starting node its distance is set of zero.

From A we then visit all the reachable nodes starting with node B and update the value to B if its better than what was there before. This is the edge relaxation step of the algorithm. We notice that a value of 3 is better than infinity so we update the best value to B to be 3.

Then we update the best value to C to be 6.

Now that we've explored all of A's edges we move on to the next node in our topological ordering which is B and explore all its edges.

So we first update node E's best value to 14 because the best value of B is 3 plus the edge weight to get to E is 11 for total of 14. 

Notice that edges get grayed out as they're used up and have been processed. Next we update the best value to D to be 7.

Now we've reached the first instance where its best not to update the value of the destination node since a better path already exists.

Now we move on to the next node in our topological ordering and keep repeating the same steps which are explore all the nodes, try to relax each edge and then move on to the next node in the topological ordering. If we repeatedly do this the array at the bottom of the screen will contain the shortest path value from A to each node. I will let the animation play and you can try and determine the shortest path to all the remaining nodes which have not yet been processed.

...

Ok now we're done processing all the nodes and know the shortest distance to every node. Let's verify that our algorithm computed the correct value by finding the shortest path to node H.

<press></press> Indeed if you look at the path and sum up the values along each edge you will find that they do indeed sum of to 11 which is the shortest path value in our array.


There's a similar problem to the shortest path problem which is finding the longest path on a graph. This problem is NP-hard on general graphs but can actually be solved in linear time on a DAG! 

The trick is to multiply all edge values by -1 then find the shortest path and then multiply the edge values by -1 again!

Take the previous graph we had, to find the longest path we negate all the edges

Then we find the shortest path and multiply the answer by -1

And that's all you need to do!

Ok now let's have a look at some source code, you can find the code i'm about to show you on github @ github dot com slash william fiset slash algorithms. 

...


Well that's it for SSSP on a DAG, thank you for watching, please link this video and subscribe to my channel for more computer science and mathematics videos!



