<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>SuffixArrays</title>
<link rel="stylesheet" type="text/css" media="all" charset="utf-8" href="modernized/css/common.css">
<link rel="stylesheet" type="text/css" media="screen" charset="utf-8" href="modernized/css/screen.css">
<link rel="stylesheet" type="text/css" media="print" charset="utf-8" href="modernized/css/print.css">
<style type="text/css">
ul.pagetitle{
  display: inline;
  margin: 0;
  padding: 0;
  font-size: 1.5em;
}
li.pagetitle{
  display: inline;
  margin: 0;
}
td.noborder {
  border: 0;
}
</style>
</head>
<body>
<table>
<tr>
<td class="noborder">
<img src="logo.png">
</td>
<td class="noborder">
<ul class="pagetitle">
<li class="pagetitle"><a class="backlink">SuffixArrays</a>
</ul>
<br><br>
[<a href="FrontPage.html">FrontPage</a>]&nbsp;[<a href="TitleIndex.html">TitleIndex</a>]&nbsp;[<a href="WordIndex.html">WordIndex</a>]&nbsp;
</td>
</tr>
</table>
<hr>
<div id="page"><p><b>Note:</b> You are looking at a static copy of the former PineWiki site, used for class notes by <a href="http://www.cs.yale.edu/homes/aspnes/">James Aspnes</a> from 2003 to 2012. Many mathematical formulas are broken, and there are likely to be other bugs as well. These will most likely not be fixed.  You may be able to find more up-to-date versions of some of these notes at <a href="http://www.cs.yale.edu/homes/aspnes/#classes">http://www.cs.yale.edu/homes/aspnes/#classes</a>.</p>
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line862">These are notes on practical implementations of suffix arrays, which are a data structure for searching quickly for substrings of a given large string.  Some of these notes are adapted from the <a href="./StringAlgorithms.html">StringAlgorithms</a> page from <a href="./CS365.html">CS365</a>. <span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><p class="line867">
<h1 id="Why_do_we_want_to_do_this.3F">1. Why do we want to do this?</h1>
<span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><ul><li>Answer from the old days: Fast string searching is the key to dealing with mountains of information.  Why, a modern (c. 1960) electronic computer can search the equivalent of hundreds of pages of text in just a few hours... <span class="anchor" id="line-6"></span></li><li>More recent answer: <span class="anchor" id="line-7"></span><ul><li><p class="line862">We still need to search enormous corpuses of text (see <a class="http" href="http://www.google.com">http://www.google.com</a>). <span class="anchor" id="line-8"></span></li><li><p class="line862">Algorithms for finding long repeated substrings or patterns can be useful for data compression (see <a class="interwiki" href="http://en.wikipedia.org/wiki/Data_compression" title="WikiPedia">Data_compression</a>) or detecting plagiarism. <span class="anchor" id="line-9"></span></li><li><p class="line862">Finding all occurrence of a particular substring in some huge corpus is the basis of <a class="interwiki" href="http://en.wikipedia.org/wiki/statistical%20machine%20translation" title="WikiPedia">statistical machine translation</a>. <span class="anchor" id="line-10"></span></li><li>We are made out of strings over a particular finite alphabet GATC.  String search is a central tool in computational biology. <span class="anchor" id="line-11"></span><span class="anchor" id="line-12"></span></li></ul></li></ul><p class="line867">
<h1 id="String_search_algorithms">2. String search algorithms</h1>
<span class="anchor" id="line-13"></span><span class="anchor" id="line-14"></span><p class="line862">Without preprocessing, searching an n-character string for an m-character substring can be done using various sophisticated algorithms, the worst of which run in time O(nm) (run <tt class="backtick">strncmp</tt> on each position in the big string), and best of which run in time O(n+m) <a class="interwiki" href="http://en.wikipedia.org/wiki/Boyer-Moore%20string%20search%20algorithm" title="WikiPedia">Boyer-Moore string search algorithm</a>.  But we are interested in the case where we can preprocess our big string into a data structure that will let us do lots of searches for cheap. <span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span><p class="line867">
<h1 id="Suffix_trees_and_suffix_arrays">3. Suffix trees and suffix arrays</h1>
<span class="anchor" id="line-17"></span><span class="anchor" id="line-18"></span><p class="line867"><strong>Suffix trees</strong> and <strong>suffix arrays</strong> are data structures for <span class="anchor" id="line-19"></span>representing texts that allow substring queries like "where does this <span class="anchor" id="line-20"></span>pattern appear in the text" or "how many times does this pattern <span class="anchor" id="line-21"></span>occur in the text" to be answered quickly.  Both work by storing all <span class="anchor" id="line-22"></span>suffixes of a text, where a <em>suffix</em> is a substring that runs to <span class="anchor" id="line-23"></span>the end of the text.  Of course, storing actual copies of all suffixes <span class="anchor" id="line-24"></span>of an n-character text would take O(n<sup>2</sup>) space, so instead each <span class="anchor" id="line-25"></span>suffix is represented by a pointer to its first character. <span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span><p class="line862">A suffix array stores all the suffixes sorted in dictionary order.  For example, the suffix array of the string <tt class="backtick">abracadabra</tt> is shown below.  The actual contents of the array are the indices in the left-hand column; the right-hand shows the corresponding suffixes. <span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span><p class="line867"><span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span><span class="anchor" id="line-34"></span><span class="anchor" id="line-35"></span><span class="anchor" id="line-36"></span><span class="anchor" id="line-37"></span><span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span><span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span><pre><span class="anchor" id="SuffixArrays-1.line-1"></span>11  \0
<span class="anchor" id="SuffixArrays-1.line-2"></span>10  a\0
<span class="anchor" id="SuffixArrays-1.line-3"></span> 7  abra\0
<span class="anchor" id="SuffixArrays-1.line-4"></span> 0  abracadabra\0
<span class="anchor" id="SuffixArrays-1.line-5"></span> 3  acadabra\0
<span class="anchor" id="SuffixArrays-1.line-6"></span> 5  adabra\0
<span class="anchor" id="SuffixArrays-1.line-7"></span> 8  bra\0
<span class="anchor" id="SuffixArrays-1.line-8"></span> 1  bracadabra\0
<span class="anchor" id="SuffixArrays-1.line-9"></span> 4  cadabra\0
<span class="anchor" id="SuffixArrays-1.line-10"></span> 6  dabra\0
<span class="anchor" id="SuffixArrays-1.line-11"></span> 9  ra\0
<span class="anchor" id="SuffixArrays-1.line-12"></span> 2  racadabra\0</pre><span class="anchor" id="line-43"></span><span class="anchor" id="line-44"></span><p class="line874">A suffix tree is similar, but instead using an array, we use some sort <span class="anchor" id="line-45"></span>of tree data structure to hold the sorted list.  A common choice given <span class="anchor" id="line-46"></span>an alphabet of some fixed size k is a trie (see <a href="./RadixSearch.html">RadixSearch</a>), in which each <span class="anchor" id="line-47"></span>node at depth d represents a string of length d, and its up to k <span class="anchor" id="line-48"></span>children represent all (d+1)-character extensions of the string. <span class="anchor" id="line-49"></span>The advantage of using a suffix trie is that searching for a string of <span class="anchor" id="line-50"></span>length m takes O(m) time, since we can just walk down the trie at <span class="anchor" id="line-51"></span>the rate of one node per character in m.  A further optimization is <span class="anchor" id="line-52"></span>to replace any long chain of single-child nodes with a <em>compressed</em> <span class="anchor" id="line-53"></span>edge labeled with the concatenation all the characters in the chain. <span class="anchor" id="line-54"></span>Such compressed suffix tries can not only be searched in linear time <span class="anchor" id="line-55"></span>but can also be constructed in linear time with a sufficiently clever <span class="anchor" id="line-56"></span>algorithm. <span class="anchor" id="line-57"></span>Of course, we could also use a simple balanced binary tree, which <span class="anchor" id="line-58"></span>might be preferable if the alphabet is large. <span class="anchor" id="line-59"></span><span class="anchor" id="line-60"></span><p class="line874">The disadvantage of suffix trees over suffix arrays is that they generally <span class="anchor" id="line-61"></span>require more space to store all the internal pointers in the tree. <span class="anchor" id="line-62"></span>If we are indexing a huge text (or collection of texts), this extra <span class="anchor" id="line-63"></span>space may be too expensive. <span class="anchor" id="line-64"></span><span class="anchor" id="line-65"></span><p class="line867">
<h2 id="Building_a_suffix_array">3.1. Building a suffix array</h2>
<span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span><p class="line874">A straightforward approach to building a suffix array is to run any <span class="anchor" id="line-68"></span>decent comparison-based sorting algorithm on the set of suffixes <span class="anchor" id="line-69"></span>(represented by pointers into the text).  This will take O(n log n) <span class="anchor" id="line-70"></span>comparisons, but in the worst case each comparison will take O(n) <span class="anchor" id="line-71"></span>time, for a total of O(n<sup>2</sup> log n) time.  This is the approach used in the sample code below. <span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span><p class="line874">The original suffix array paper by Manber and Myers ("Suffix arrays: a new method for on-line string searches," SIAM Journal on Computing 22(5):935-948, 1993) <span class="anchor" id="line-74"></span>gives an O(n log n) algorithm, somewhat resembling radix sort, for <span class="anchor" id="line-75"></span>building suffix arrays in place with only a small amount of <span class="anchor" id="line-76"></span>additional space. <span class="anchor" id="line-77"></span>They also note that <span class="anchor" id="line-78"></span>for random text, simple radix sorting works well, since most suffixes become <span class="anchor" id="line-79"></span>distinguishable after about log<sub>k</sub> n characters (where k is the <span class="anchor" id="line-80"></span>size of the alphabet).  Assuming random data would also give an O(n log<sup>2</sup> n) running time for a comparison-based sort. <span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span><p class="line874">The fastest approach is to build a suffix tree in O(n) time and <span class="anchor" id="line-83"></span>extract the suffix array by traversing the tree.  The only <span class="anchor" id="line-84"></span>complication is that we need the extra space to build the tree, <span class="anchor" id="line-85"></span>although we get it back when we throw the tree away. <span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><p class="line867">
<h2 id="Searching_a_suffix_array">3.2. Searching a suffix array</h2>
<span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><p class="line874">Suppose we have a suffix array corresponding to an n-character text <span class="anchor" id="line-90"></span>and we want to find all occurrences in the text of an m-character <span class="anchor" id="line-91"></span>pattern.  Since the suffixes are ordered, the easiest solution is to do binary search for <span class="anchor" id="line-92"></span>the first and last occurrences of the pattern (if any) using O(log n) <span class="anchor" id="line-93"></span>comparisons.  (The code below does something even lazier than this, searching for some match and then scanning linearly for the first and last maches.) <span class="anchor" id="line-94"></span>Unfortunately, each comparison may take as much as <span class="anchor" id="line-95"></span>O(m) time, since we may have to check all m characters of the <span class="anchor" id="line-96"></span>pattern.  So the total cost will be O(m log n) in the worst case. <span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><p class="line874">By storing additional information about the longest common prefix of <span class="anchor" id="line-99"></span>regisions of contiguous suffixes, it is possible to avoid having to re-examine every <span class="anchor" id="line-100"></span>character in the pattern for every comparison, reducing the search <span class="anchor" id="line-101"></span>cost to O(m + log n).  With a sufficiently clever algorithm, this information can be computed in linear time, and can also be used to solve <span class="anchor" id="line-102"></span>quickly such problems as finding <span class="anchor" id="line-103"></span>the longest duplicate substrings, or most frequently occurring strings (<a href="./GusfieldBook.html">GusfieldBook</a> §7.14.4). <span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><p class="line874">Using binary search on the suffix array, most searching tasks are now easy: <span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><ul><li>Finding if a subtring appears in the array uses binary search directly. <span class="anchor" id="line-108"></span></li><li>Finding all occurrences requires two binary searches, one for the first occurrence and one for the last.  If we only want to count the occurrences and not return their positions, this takes O(m + log n) time.  If we want to return their positions, it takes O(m + log n + k) time, where k is the number of times the pattern occurs. <span class="anchor" id="line-109"></span></li><li><p class="line862">Finding duplicate substrings of length m or more can be done by looking for adjacent entries in the array with long common prefixes, which takes O(mn) time in the worst case if done naively (and O(n) time if we have already computed longest common prefix information; see <a href="./GusfieldBook.html">GusfieldBook</a>). <span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span></li></ul><p class="line867">
<h1 id="Burrows-Wheeler_transform">4. Burrows-Wheeler transform</h1>
<span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span><p class="line862">Closely related to suffix arrays is the <strong>Burrows-Wheeler transform</strong> (Burrows and Wheeler, <em>A Block-Sorting Lossless Data Compression Algorithm</em>, DEC Systems Research Center Technical Report number 124, 1994), which is the basis for some of the best currently known algorithms for text compression (it's the technique that is used, for example, in <a class="http" href="http://sources.redhat.com/bzip2/">bzip2</a>). <span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span><p class="line874">The idea of the <span class="anchor" id="line-116"></span>Burrows-Wheeler Transform is to construct an array whose rows are all <span class="anchor" id="line-117"></span>cyclic shifts of the input string in dictionary order, and return the <span class="anchor" id="line-118"></span>last column of the array.  The last column will tend to have long runs <span class="anchor" id="line-119"></span>of identical characters, since whenever some substring (like <span class="anchor" id="line-120"></span><tt class="backtick">the</tt> appears repeatedly in the input, shifts that put the <span class="anchor" id="line-121"></span>first character <tt class="backtick">t</tt> in the last column will <span class="anchor" id="line-122"></span>put the rest of the substring <tt class="backtick">he</tt> <span class="anchor" id="line-123"></span>in the first columns, and the resulting rows will tend to be sorted <span class="anchor" id="line-124"></span>together.  The relative regularity of the last column means that it <span class="anchor" id="line-125"></span>will compress well with even very simple compression algorithms like run-length encoding. <span class="anchor" id="line-126"></span><span class="anchor" id="line-127"></span><p class="line862">Below is an example of the Burrows-Wheeler transform in action, with <tt class="backtick">$</tt> marking end-of-text.  The <span class="anchor" id="line-128"></span>transformed value of <tt class="backtick">abracadabra$</tt> is <tt class="backtick">$drcraaaabba</tt>, the last column of the sorted array; note the long run of a's (and the shorter run of b's). <span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span><p class="line867"><span class="anchor" id="line-131"></span><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span><span class="anchor" id="line-139"></span><span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span><pre><span class="anchor" id="SuffixArrays-1.line-1-1"></span>abracadabra$     abracadabra$
<span class="anchor" id="SuffixArrays-1.line-2-1"></span>bracadabra$a     abra$abracad
<span class="anchor" id="SuffixArrays-1.line-3-1"></span>racadabra$ab     acadabra$abr
<span class="anchor" id="SuffixArrays-1.line-4-1"></span>acadabra$abr     adabra$abrac
<span class="anchor" id="SuffixArrays-1.line-5-1"></span>cadabra$abra     a$abracadabr
<span class="anchor" id="SuffixArrays-1.line-6-1"></span>adabra$abrac     bracadabra$a
<span class="anchor" id="SuffixArrays-1.line-7-1"></span>dabra$abraca --&gt; bra$abracada
<span class="anchor" id="SuffixArrays-1.line-8-1"></span>abra$abracad     cadabra$abra
<span class="anchor" id="SuffixArrays-1.line-9-1"></span>bra$abracada     dabra$abraca
<span class="anchor" id="SuffixArrays-1.line-10-1"></span>ra$abracadab     racadabra$ab
<span class="anchor" id="SuffixArrays-1.line-11-1"></span>a$abracadabr     ra$abracadab
<span class="anchor" id="SuffixArrays-1.line-12-1"></span>$abracadabra     $abracadabra</pre><span class="anchor" id="line-143"></span><span class="anchor" id="line-144"></span><p class="line874">The most useful property of the Burrows-Wheeler transform is that it can be inverted; this distinguishes it from other transforms that produce long runs like simply sorting the characters. <span class="anchor" id="line-145"></span>We'll describe two ways to do this; the first is less efficient, but <span class="anchor" id="line-146"></span>more easily grasped, and involves <span class="anchor" id="line-147"></span>rebuilding the array one column at <span class="anchor" id="line-148"></span>a time, starting at the left.  Observe that the leftmost column is <span class="anchor" id="line-149"></span>just all the characters in the string in sorted order; we can recover <span class="anchor" id="line-150"></span>it by sorting the rightmost column, which we have to start off with. <span class="anchor" id="line-151"></span>If we paste the rightmost and leftmost columns together, we have the <span class="anchor" id="line-152"></span>list of all 2-character substrings of the original text; sorting this <span class="anchor" id="line-153"></span>list gives the first <em>two</em> columns of the array.  (Remember that <span class="anchor" id="line-154"></span>each copy of the string wraps around from the right to the left.) <span class="anchor" id="line-155"></span>We can then paste the rightmost column at the beginning of these two <span class="anchor" id="line-156"></span>columns, sort the result, and get the first three columns.  Repeating <span class="anchor" id="line-157"></span>this process eventually reconstructs the entire array, from which we <span class="anchor" id="line-158"></span>can read off the original string from any row. <span class="anchor" id="line-159"></span>The initial stages of this process for <span class="anchor" id="line-160"></span><tt class="backtick">abracadabra$</tt> are <span class="anchor" id="line-161"></span>shown below: <span class="anchor" id="line-162"></span><span class="anchor" id="line-163"></span><p class="line867"><span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><span class="anchor" id="line-166"></span><span class="anchor" id="line-167"></span><span class="anchor" id="line-168"></span><span class="anchor" id="line-169"></span><span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><span class="anchor" id="line-174"></span><span class="anchor" id="line-175"></span><pre><span class="anchor" id="SuffixArrays-1.line-1-2"></span>$    a       $a    ab       $ab    abr
<span class="anchor" id="SuffixArrays-1.line-2-2"></span>d    a       da    ab       dab    abr
<span class="anchor" id="SuffixArrays-1.line-3-2"></span>r    a       ra    ac       rac    aca
<span class="anchor" id="SuffixArrays-1.line-4-2"></span>c    a       ca    ad       cad    ada
<span class="anchor" id="SuffixArrays-1.line-5-2"></span>r    a       ra    a$       ra$    a$a
<span class="anchor" id="SuffixArrays-1.line-6-2"></span>a    b       ab    br       abr    bra
<span class="anchor" id="SuffixArrays-1.line-7-2"></span>a -&gt; b       ab -&gt; br       abr -&gt; bra
<span class="anchor" id="SuffixArrays-1.line-8-2"></span>a    c       ac    ca       aca    cad
<span class="anchor" id="SuffixArrays-1.line-9-2"></span>a    d       ad    da       ada    dab
<span class="anchor" id="SuffixArrays-1.line-10-2"></span>b    r       br    ra       bra    rac
<span class="anchor" id="SuffixArrays-1.line-11-2"></span>b    r       br    ra       bra    ra$
<span class="anchor" id="SuffixArrays-1.line-12-2"></span>a    $       a$    $a       a$a    $ab</pre><span class="anchor" id="line-176"></span><span class="anchor" id="line-177"></span><span class="anchor" id="line-178"></span><p class="line862">Rebuilding the entire array in this fashion takes O(n<sup>2</sup>) time and O(n<sup>2</sup>) space. <span class="anchor" id="line-179"></span>In their paper, <span class="anchor" id="line-180"></span>Burrows and Wheeler showed that one can in fact <span class="anchor" id="line-181"></span>reconstruct the original string from just the first and last columns <span class="anchor" id="line-182"></span>in the array in O(n) time. <span class="anchor" id="line-183"></span><span class="anchor" id="line-184"></span><p class="line874">Here's the idea: Suppose that all the characters were distinct.  Then <span class="anchor" id="line-185"></span>after reconstructing the first column we would know all pairs of adjacent <span class="anchor" id="line-186"></span>characters.  So we could just start with the last character <tt class="backtick">$</tt> <span class="anchor" id="line-187"></span>and regenerate the string by appending at each step the unique <span class="anchor" id="line-188"></span>successor to the last character so far. <span class="anchor" id="line-189"></span>If all characters were distinct, we would never get <span class="anchor" id="line-190"></span>confused about which character comes next. <span class="anchor" id="line-191"></span><span class="anchor" id="line-192"></span><p class="line874">The problem is what to do with pairs with <span class="anchor" id="line-193"></span>duplicate first characters, like <tt class="backtick">ab</tt> and <span class="anchor" id="line-194"></span><tt class="backtick">ac</tt> in the example above.  We can <span class="anchor" id="line-195"></span>imagine that each <tt class="backtick">a</tt> in the last column is labeled in some <span class="anchor" id="line-196"></span>unique way, so that we can talk about the first <tt class="backtick">a</tt> or the <span class="anchor" id="line-197"></span>third <tt class="backtick">a</tt>, but how do we know which <tt class="backtick">a</tt> is the one that <span class="anchor" id="line-198"></span>comes before <tt class="backtick">b</tt> or <tt class="backtick">d</tt>? <span class="anchor" id="line-199"></span><span class="anchor" id="line-200"></span><p class="line874">The trick is to look closely at how the original sort works. <span class="anchor" id="line-201"></span>Look at the rows in the original transformation. <span class="anchor" id="line-202"></span>If we look at all rows that start with <tt class="backtick">a</tt>, the order they are <span class="anchor" id="line-203"></span>sorted in is determined by the suffix after <tt class="backtick">a</tt>.  These <span class="anchor" id="line-204"></span>suffixes also appear as the prefixes of the rows that <em>end</em> with <span class="anchor" id="line-205"></span><tt class="backtick">a</tt>, since the rows that end with <tt class="backtick">a</tt> are just the rows <span class="anchor" id="line-206"></span>that start with <tt class="backtick">a</tt> rotated one position.  It follows that <span class="anchor" id="line-207"></span><em>all instances of the same letter occur in the same order in the <span class="anchor" id="line-208"></span>first and last columns</em>.  So if we use a stable sort to <span class="anchor" id="line-209"></span>construct the first column, we will correctly match up instances of <span class="anchor" id="line-210"></span>letters. <span class="anchor" id="line-211"></span><span class="anchor" id="line-212"></span><p class="line874">This method is shown in action below.  Each letter is annotated <span class="anchor" id="line-213"></span>uniquely with <span class="anchor" id="line-214"></span>a count of how many identical letters equal or precede it. <span class="anchor" id="line-215"></span>Sorting recovers the first column, and combining the last and first <span class="anchor" id="line-216"></span>columns gives a list of unique pairs of adjacent annotated characters. <span class="anchor" id="line-217"></span>Now start with <tt class="backtick">$1</tt> and construct the <span class="anchor" id="line-218"></span>full sequence <span class="anchor" id="line-219"></span><tt class="backtick">$1&nbsp;a1&nbsp;b1&nbsp;r1&nbsp;a3&nbsp;c1&nbsp;a4&nbsp;d1&nbsp;a2&nbsp;b2&nbsp;r2&nbsp;a5&nbsp;$1</tt>. <span class="anchor" id="line-220"></span>The original string is obtained by removing the end-of-string markers and <span class="anchor" id="line-221"></span>annotations: <tt class="backtick">abracadabra</tt>. <span class="anchor" id="line-222"></span><span class="anchor" id="line-223"></span><p class="line867"><span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span><span class="anchor" id="line-226"></span><span class="anchor" id="line-227"></span><span class="anchor" id="line-228"></span><span class="anchor" id="line-229"></span><span class="anchor" id="line-230"></span><span class="anchor" id="line-231"></span><span class="anchor" id="line-232"></span><span class="anchor" id="line-233"></span><span class="anchor" id="line-234"></span><span class="anchor" id="line-235"></span><pre><span class="anchor" id="SuffixArrays-1.line-1-3"></span>$1     a1
<span class="anchor" id="SuffixArrays-1.line-2-3"></span>d1     a2
<span class="anchor" id="SuffixArrays-1.line-3-3"></span>r1     a3
<span class="anchor" id="SuffixArrays-1.line-4-3"></span>c1     a4
<span class="anchor" id="SuffixArrays-1.line-5-3"></span>r2     a5
<span class="anchor" id="SuffixArrays-1.line-6-3"></span>a1     b1
<span class="anchor" id="SuffixArrays-1.line-7-3"></span>a2 --&gt; b2
<span class="anchor" id="SuffixArrays-1.line-8-3"></span>a3     c1
<span class="anchor" id="SuffixArrays-1.line-9-3"></span>a4     d1
<span class="anchor" id="SuffixArrays-1.line-10-3"></span>b1     r1
<span class="anchor" id="SuffixArrays-1.line-11-3"></span>b2     r2
<span class="anchor" id="SuffixArrays-1.line-12-3"></span>a5     $1</pre><span class="anchor" id="line-236"></span><span class="anchor" id="line-237"></span><p class="line874">Because we are only sorting single characters, we can perform the sort <span class="anchor" id="line-238"></span>in linear time using counting sort.  Extracting the original string <span class="anchor" id="line-239"></span>also takes linear time if implemented reasonably. <span class="anchor" id="line-240"></span><span class="anchor" id="line-241"></span><p class="line867">
<h2 id="Suffix_arrays_and_the_Burrows-Wheeler_transform">4.1. Suffix arrays and the Burrows-Wheeler transform</h2>
<span class="anchor" id="line-242"></span><span class="anchor" id="line-243"></span><p class="line874">A useful property of the Burrows-Wheeler transform is that each row of <span class="anchor" id="line-244"></span>the sorted array is essentially the same as the corresponding row in <span class="anchor" id="line-245"></span>the suffix array, except for the rotated string prefix after the <tt class="backtick">$</tt> <span class="anchor" id="line-246"></span>marker.  This means, among other things, that we can compute the <span class="anchor" id="line-247"></span>Burrows-Wheeler transform <span class="anchor" id="line-248"></span>in linear time using suffix trees. <span class="anchor" id="line-249"></span>Ferragina and Manzini (<a class="http" href="http://www.imc.pi.cnr.it/~manzini/papers/focs00.html">http://www.imc.pi.cnr.it/~manzini/papers/focs00.html</a>) <span class="anchor" id="line-250"></span>have further exploited this correspondence <span class="anchor" id="line-251"></span>(and some very clever additional ideas) <span class="anchor" id="line-252"></span>to design compressed suffix arrays that compress and index a text at <span class="anchor" id="line-253"></span>the same time, so that pattern searches can be done directly on the <span class="anchor" id="line-254"></span>compressed text in time close to that needed for suffix array <span class="anchor" id="line-255"></span>searches. <span class="anchor" id="line-256"></span><span class="anchor" id="line-257"></span><p class="line867">
<h1 id="Sample_implementation">5. Sample implementation</h1>
<span class="anchor" id="line-258"></span><span class="anchor" id="line-259"></span><p class="line874">As mentioned above, this is a pretty lazy implementation of suffix arrays, that doesn't include many of the optimizations that would be necessary to deal with huge source texts. <span class="anchor" id="line-260"></span><span class="anchor" id="line-261"></span><p class="line867"><span class="anchor" id="line-1-1"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
function isnumbered(obj) {
  return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
  var nlen = Math.max(0,chrs-(''+num).length), res = '';
  while (nlen>0) { res += ' '; nlen-- }
  return res+num+add;
}
function addnumber(did, nstart, nstep) {
  var c = document.getElementById(did), l = c.firstChild, n = 1;
  if (!isnumbered(c)) {
    if (typeof nstart == 'undefined') nstart = 1;
    if (typeof nstep  == 'undefined') nstep = 1;
    var n = nstart;
    while (l != null) {
      if (l.tagName == 'SPAN') {
        var s = document.createElement('SPAN');
        var a = document.createElement('A');
        s.className = 'LineNumber';
        a.appendChild(document.createTextNode(nformat(n,4,'')));
        a.href = '#' + did + '_' + n;
        s.appendChild(a);
        s.appendChild(document.createTextNode(' '));
        n += nstep;
        if (l.childNodes.length) {
          l.insertBefore(s, l.firstChild);
        }
        else {
          l.appendChild(s);
        }
      }
      l = l.nextSibling;
    }
  }
  return false;
}
function remnumber(did) {
  var c = document.getElementById(did), l = c.firstChild;
  if (isnumbered(c)) {
    while (l != null) {
      if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
      l = l.nextSibling;
    }
  }
  return false;
}
function togglenumber(did, nstart, nstep) {
  var c = document.getElementById(did);
  if (isnumbered(c)) {
    remnumber(did);
  } else {
    addnumber(did,nstart,nstep);
  }
  return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-a08234d7e89b3bb14a3adf721bc59a139774136c\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_1">   1</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_1"></span><span class="anchor" id="line-1-2"></span><span class="Comment">/* we expose this so user can iterate through it */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_2">   2</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_2"></span><span class="anchor" id="line-2-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_3">   3</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_3"></span><span class="anchor" id="line-3-1"></span><span class="ResWord">struct</span> <span class="ID">suffixArray</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_4">   4</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_4"></span><span class="anchor" id="line-4-1"></span>    <span class="ResWord">size_t</span> <span class="ID">n</span>;               <span class="Comment">/* length of string INCLUDING final null */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_5">   5</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_5"></span><span class="anchor" id="line-5-1"></span>    <span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">string</span>;     <span class="Comment">/* original string */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_6">   6</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_6"></span><span class="anchor" id="line-6-1"></span>    <span class="ResWord">const</span> <span class="ResWord">char</span> **<span class="ID">suffix</span>;    <span class="Comment">/* suffix array of length n */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_7">   7</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_7"></span><span class="anchor" id="line-7-1"></span>};</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_8">   8</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_8"></span><span class="anchor" id="line-8-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_9">   9</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_9"></span><span class="anchor" id="line-9-1"></span><span class="ResWord">typedef</span> <span class="ResWord">struct</span> <span class="ID">suffixArray</span> *<span class="ID">SuffixArray</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_10">  10</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_10"></span><span class="anchor" id="line-10-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_11">  11</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_11"></span><span class="anchor" id="line-11-1"></span><span class="Comment">/* construct a suffix array */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_12">  12</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_12"></span><span class="anchor" id="line-12-1"></span><span class="Comment">/* it is a bad idea to modify string before destroying this */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_13">  13</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_13"></span><span class="anchor" id="line-13-1"></span><span class="ID">SuffixArray</span> <span class="ID">suffixArrayCreate</span>(<span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">string</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_14">  14</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_14"></span><span class="anchor" id="line-14-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_15">  15</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_15"></span><span class="anchor" id="line-15-1"></span><span class="Comment">/* destructor */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_16">  16</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_16"></span><span class="anchor" id="line-16-1"></span><span class="ResWord">void</span> <span class="ID">suffixArrayDestroy</span>(<span class="ID">SuffixArray</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_17">  17</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_17"></span><span class="anchor" id="line-17-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_18">  18</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_18"></span><span class="anchor" id="line-18-1"></span><span class="Comment">/* return number of occurrences of substring */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_19">  19</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_19"></span><span class="anchor" id="line-19-1"></span><span class="Comment">/* if non-null, index of first occurrence is place in first */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_20">  20</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_20"></span><span class="anchor" id="line-20-1"></span><span class="ResWord">size_t</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_21">  21</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_21"></span><span class="anchor" id="line-21-1"></span><span class="ID">suffixArraySearch</span>(<span class="ID">SuffixArray</span>, <span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">substring</span>, <span class="ResWord">size_t</span> *<span class="ID">first</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_22">  22</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_22"></span><span class="anchor" id="line-22-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_23">  23</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_23"></span><span class="anchor" id="line-23-1"></span><span class="Comment">/* return the Burrows-Wheeler transform of the underlying string </span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_24">  24</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_24"></span><span class="anchor" id="line-24-1"></span><span class="Comment"> * as malloc'd data of length sa-&gt;n */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_25">  25</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_25"></span><span class="anchor" id="line-25-1"></span><span class="Comment">/* note that this may have a null in the middle somewhere */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_26">  26</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_26"></span><span class="anchor" id="line-26-1"></span><span class="ResWord">char</span> *<span class="ID">suffixArrayBWT</span>(<span class="ID">SuffixArray</span> <span class="ID">sa</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_27">  27</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_27"></span><span class="anchor" id="line-27-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_28">  28</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_28"></span><span class="anchor" id="line-28-1"></span><span class="Comment">/* invert BWT of null-terminated string, returning a malloc'd copy of original */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-a08234d7e89b3bb14a3adf721bc59a139774136c_29">  29</a> </span><span class="LineAnchor" id="CA-a08234d7e89b3bb14a3adf721bc59a139774136c_29"></span><span class="anchor" id="line-29-1"></span><span class="ResWord">char</span> *<span class="ID">inverseBWT</span>(<span class="ResWord">size_t</span> <span class="ID">len</span>, <span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">s</span>);</span>
</pre></div></div><a class="attachment" href="attachments/SuffixArrays/suffixArray.h" title="attachment:suffixArray.h">suffixArray.h</a> <span class="anchor" id="line-262"></span><span class="anchor" id="line-263"></span><p class="line867"><span class="anchor" id="line-1-3"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-83725d8fcddb6fca77c800403345d4829d0bb14d\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_1">   1</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_1"></span><span class="anchor" id="line-1-4"></span><span class="Preprc">#</span><span class="Preprc">include &lt;stdlib.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_2">   2</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_2"></span><span class="anchor" id="line-2-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;assert.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_3">   3</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_3"></span><span class="anchor" id="line-3-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;string.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_4">   4</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_4"></span><span class="anchor" id="line-4-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;limits.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_5">   5</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_5"></span><span class="anchor" id="line-5-2"></span><span class="Preprc"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_6">   6</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_6"></span><span class="anchor" id="line-6-2"></span><span class="Preprc">#</span><span class="Preprc">include "suffixArray.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_7">   7</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_7"></span><span class="anchor" id="line-7-2"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_8">   8</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_8"></span><span class="anchor" id="line-8-2"></span><span class="ResWord">static</span> <span class="ResWord">int</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_9">   9</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_9"></span><span class="anchor" id="line-9-2"></span><span class="ID">saCompare</span>(<span class="ResWord">const</span> <span class="ResWord">void</span> *<span class="ID">s1</span>, <span class="ResWord">const</span> <span class="ResWord">void</span> *<span class="ID">s2</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_10">  10</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_10"></span><span class="anchor" id="line-10-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_11">  11</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_11"></span><span class="anchor" id="line-11-2"></span>    <span class="ResWord">return</span> <span class="ID">strcmp</span>(*((<span class="ResWord">const</span> <span class="ResWord">char</span> **) <span class="ID">s1</span>), *((<span class="ResWord">const</span> <span class="ResWord">char</span> **) <span class="ID">s2</span>));</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_12">  12</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_12"></span><span class="anchor" id="line-12-2"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_13">  13</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_13"></span><span class="anchor" id="line-13-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_14">  14</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_14"></span><span class="anchor" id="line-14-2"></span><span class="ID">SuffixArray</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_15">  15</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_15"></span><span class="anchor" id="line-15-2"></span><span class="ID">suffixArrayCreate</span>(<span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">s</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_16">  16</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_16"></span><span class="anchor" id="line-16-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_17">  17</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_17"></span><span class="anchor" id="line-17-2"></span>    <span class="ResWord">size_t</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_18">  18</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_18"></span><span class="anchor" id="line-18-2"></span>    <span class="ID">SuffixArray</span> <span class="ID">sa</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_19">  19</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_19"></span><span class="anchor" id="line-19-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_20">  20</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_20"></span><span class="anchor" id="line-20-2"></span>    <span class="ID">sa</span> = <span class="ID">malloc</span>(<span class="ResWord">sizeof</span>(*<span class="ID">sa</span>));</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_21">  21</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_21"></span><span class="anchor" id="line-21-2"></span>    <span class="ID">assert</span>(<span class="ID">sa</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_22">  22</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_22"></span><span class="anchor" id="line-22-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_23">  23</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_23"></span><span class="anchor" id="line-23-2"></span>    <span class="ID">sa</span>-&gt;<span class="ID">n</span> = <span class="ID">strlen</span>(<span class="ID">s</span>) + <span class="Number">1</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_24">  24</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_24"></span><span class="anchor" id="line-24-2"></span>    <span class="ID">sa</span>-&gt;<span class="ID">string</span> = <span class="ID">s</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_25">  25</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_25"></span><span class="anchor" id="line-25-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_26">  26</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_26"></span><span class="anchor" id="line-26-2"></span>    <span class="ID">sa</span>-&gt;<span class="ID">suffix</span> = <span class="ID">malloc</span>(<span class="ResWord">sizeof</span>(*<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>) * <span class="ID">sa</span>-&gt;<span class="ID">n</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_27">  27</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_27"></span><span class="anchor" id="line-27-2"></span>    <span class="ID">assert</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_28">  28</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_28"></span><span class="anchor" id="line-28-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_29">  29</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_29"></span><span class="anchor" id="line-29-2"></span>    <span class="Comment">/* construct array of pointers to suffixes */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_30">  30</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_30"></span><span class="anchor" id="line-30-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">sa</span>-&gt;<span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_31">  31</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_31"></span><span class="anchor" id="line-31-1"></span>        <span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">i</span>] = <span class="ID">s</span>+<span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_32">  32</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_32"></span><span class="anchor" id="line-32-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_33">  33</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_33"></span><span class="anchor" id="line-33-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_34">  34</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_34"></span><span class="anchor" id="line-34-1"></span>    <span class="Comment">/* this could be a lot more efficient */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_35">  35</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_35"></span><span class="anchor" id="line-35-1"></span>    <span class="ID">qsort</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>, <span class="ID">sa</span>-&gt;<span class="ID">n</span>, <span class="ResWord">sizeof</span>(*<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>), <span class="ID">saCompare</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_36">  36</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_36"></span><span class="anchor" id="line-36-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_37">  37</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_37"></span><span class="anchor" id="line-37-1"></span>    <span class="ResWord">return</span> <span class="ID">sa</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_38">  38</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_38"></span><span class="anchor" id="line-38-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_39">  39</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_39"></span><span class="anchor" id="line-39-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_40">  40</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_40"></span><span class="anchor" id="line-40-1"></span><span class="ResWord">void</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_41">  41</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_41"></span><span class="anchor" id="line-41-1"></span><span class="ID">suffixArrayDestroy</span>(<span class="ID">SuffixArray</span> <span class="ID">sa</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_42">  42</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_42"></span><span class="anchor" id="line-42-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_43">  43</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_43"></span><span class="anchor" id="line-43-1"></span>    <span class="ID">free</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_44">  44</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_44"></span><span class="anchor" id="line-44-1"></span>    <span class="ID">free</span>(<span class="ID">sa</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_45">  45</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_45"></span><span class="anchor" id="line-45-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_46">  46</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_46"></span><span class="anchor" id="line-46-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_47">  47</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_47"></span><span class="anchor" id="line-47-1"></span><span class="ResWord">size_t</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_48">  48</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_48"></span><span class="anchor" id="line-48-1"></span><span class="ID">suffixArraySearch</span>(<span class="ID">SuffixArray</span> <span class="ID">sa</span>, <span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">substring</span>, <span class="ResWord">size_t</span> *<span class="ID">first</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_49">  49</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_49"></span><span class="anchor" id="line-49-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_50">  50</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_50"></span><span class="anchor" id="line-50-1"></span>    <span class="ResWord">size_t</span> <span class="ID">lo</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_51">  51</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_51"></span><span class="anchor" id="line-51-1"></span>    <span class="ResWord">size_t</span> <span class="ID">hi</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_52">  52</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_52"></span><span class="anchor" id="line-52-1"></span>    <span class="ResWord">size_t</span> <span class="ID">mid</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_53">  53</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_53"></span><span class="anchor" id="line-53-1"></span>    <span class="ResWord">size_t</span> <span class="ID">len</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_54">  54</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_54"></span><span class="anchor" id="line-54-1"></span>    <span class="ResWord">int</span> <span class="ID">cmp</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_55">  55</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_55"></span><span class="anchor" id="line-55-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_56">  56</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_56"></span><span class="anchor" id="line-56-1"></span>    <span class="ID">len</span> = <span class="ID">strlen</span>(<span class="ID">substring</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_57">  57</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_57"></span><span class="anchor" id="line-57-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_58">  58</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_58"></span><span class="anchor" id="line-58-1"></span>    <span class="Comment">/* invariant: suffix[lo] &lt;= substring &lt; suffix[hi] */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_59">  59</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_59"></span><span class="anchor" id="line-59-1"></span>    <span class="ID">lo</span> = <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_60">  60</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_60"></span><span class="anchor" id="line-60-1"></span>    <span class="ID">hi</span> = <span class="ID">sa</span>-&gt;<span class="ID">n</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_61">  61</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_61"></span><span class="anchor" id="line-61-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_62">  62</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_62"></span><span class="anchor" id="line-62-1"></span>    <span class="ResWord">while</span>(<span class="ID">lo</span> + <span class="Number">1</span> &lt; <span class="ID">hi</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_63">  63</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_63"></span><span class="anchor" id="line-63-1"></span>        <span class="ID">mid</span> = (<span class="ID">lo</span>+<span class="ID">hi</span>)/<span class="Number">2</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_64">  64</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_64"></span><span class="anchor" id="line-64-1"></span>        <span class="ID">cmp</span> = <span class="ID">strncmp</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">mid</span>], <span class="ID">substring</span>, <span class="ID">len</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_65">  65</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_65"></span><span class="anchor" id="line-65-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_66">  66</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_66"></span><span class="anchor" id="line-66-1"></span>        <span class="ResWord">if</span>(<span class="ID">cmp</span> == <span class="Number">0</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_67">  67</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_67"></span><span class="anchor" id="line-67-1"></span>            <span class="Comment">/* we have a winner */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_68">  68</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_68"></span><span class="anchor" id="line-68-1"></span>            <span class="Comment">/* search backwards and forwards for first and last */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_69">  69</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_69"></span><span class="anchor" id="line-69-1"></span>            <span class="ResWord">for</span>(<span class="ID">lo</span> = <span class="ID">mid</span>; <span class="ID">lo</span> &gt; <span class="Number">0</span> &amp;&amp; <span class="ID">strncmp</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">lo</span>-<span class="Number">1</span>], <span class="ID">substring</span>, <span class="ID">len</span>) == <span class="Number">0</span>; <span class="ID">lo</span>--);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_70">  70</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_70"></span><span class="anchor" id="line-70-1"></span>            <span class="ResWord">for</span>(<span class="ID">hi</span> = <span class="ID">mid</span>; <span class="ID">hi</span> &lt; <span class="ID">sa</span>-&gt;<span class="ID">n</span> &amp;&amp; <span class="ID">strncmp</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">hi</span>+<span class="Number">1</span>], <span class="ID">substring</span>, <span class="ID">len</span>) == <span class="Number">0</span>; <span class="ID">hi</span>++);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_71">  71</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_71"></span><span class="anchor" id="line-71-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_72">  72</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_72"></span><span class="anchor" id="line-72-1"></span>            <span class="ResWord">if</span>(<span class="ID">first</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_73">  73</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_73"></span><span class="anchor" id="line-73-1"></span>                *<span class="ID">first</span> = <span class="ID">lo</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_74">  74</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_74"></span><span class="anchor" id="line-74-1"></span>            }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_75">  75</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_75"></span><span class="anchor" id="line-75-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_76">  76</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_76"></span><span class="anchor" id="line-76-1"></span>            <span class="ResWord">return</span> <span class="ID">hi</span> - <span class="ID">lo</span> + <span class="Number">1</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_77">  77</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_77"></span><span class="anchor" id="line-77-1"></span>        } <span class="ResWord">else</span> <span class="ResWord">if</span>(<span class="ID">cmp</span> &lt; <span class="Number">0</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_78">  78</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_78"></span><span class="anchor" id="line-78-1"></span>            <span class="ID">lo</span> = <span class="ID">mid</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_79">  79</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_79"></span><span class="anchor" id="line-79-1"></span>        } <span class="ResWord">else</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_80">  80</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_80"></span><span class="anchor" id="line-80-1"></span>            <span class="ID">hi</span> = <span class="ID">mid</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_81">  81</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_81"></span><span class="anchor" id="line-81-1"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_82">  82</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_82"></span><span class="anchor" id="line-82-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_83">  83</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_83"></span><span class="anchor" id="line-83-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_84">  84</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_84"></span><span class="anchor" id="line-84-1"></span>    <span class="ResWord">return</span> <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_85">  85</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_85"></span><span class="anchor" id="line-85-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_86">  86</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_86"></span><span class="anchor" id="line-86-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_87">  87</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_87"></span><span class="anchor" id="line-87-1"></span><span class="ResWord">char</span> *</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_88">  88</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_88"></span><span class="anchor" id="line-88-1"></span><span class="ID">suffixArrayBWT</span>(<span class="ID">SuffixArray</span> <span class="ID">sa</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_89">  89</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_89"></span><span class="anchor" id="line-89-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_90">  90</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_90"></span><span class="anchor" id="line-90-1"></span>    <span class="ResWord">char</span> *<span class="ID">bwt</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_91">  91</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_91"></span><span class="anchor" id="line-91-1"></span>    <span class="ResWord">size_t</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_92">  92</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_92"></span><span class="anchor" id="line-92-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_93">  93</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_93"></span><span class="anchor" id="line-93-1"></span>    <span class="ID">bwt</span> = <span class="ID">malloc</span>(<span class="ID">sa</span>-&gt;<span class="ID">n</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_94">  94</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_94"></span><span class="anchor" id="line-94-1"></span>    <span class="ID">assert</span>(<span class="ID">bwt</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_95">  95</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_95"></span><span class="anchor" id="line-95-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_96">  96</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_96"></span><span class="anchor" id="line-96-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">sa</span>-&gt;<span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_97">  97</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_97"></span><span class="anchor" id="line-97-1"></span>        <span class="ResWord">if</span>(<span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">i</span>] == <span class="ID">sa</span>-&gt;<span class="ID">string</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_98">  98</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_98"></span><span class="anchor" id="line-98-1"></span>            <span class="Comment">/* wraps around to nul */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_99">  99</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_99"></span><span class="anchor" id="line-99-1"></span>            <span class="ID">bwt</span>[<span class="ID">i</span>] = <span class="Char">'\0'</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_100"> 100</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_100"></span><span class="anchor" id="line-100-1"></span>        } <span class="ResWord">else</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_101"> 101</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_101"></span><span class="anchor" id="line-101-1"></span>            <span class="ID">bwt</span>[<span class="ID">i</span>] = <span class="ID">sa</span>-&gt;<span class="ID">suffix</span>[<span class="ID">i</span>][-<span class="Number">1</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_102"> 102</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_102"></span><span class="anchor" id="line-102-1"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_103"> 103</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_103"></span><span class="anchor" id="line-103-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_104"> 104</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_104"></span><span class="anchor" id="line-104-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_105"> 105</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_105"></span><span class="anchor" id="line-105-1"></span>    <span class="ResWord">return</span> <span class="ID">bwt</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_106"> 106</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_106"></span><span class="anchor" id="line-106-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_107"> 107</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_107"></span><span class="anchor" id="line-107-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_108"> 108</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_108"></span><span class="anchor" id="line-108-1"></span><span class="ResWord">char</span> *</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_109"> 109</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_109"></span><span class="anchor" id="line-109-1"></span><span class="ID">inverseBWT</span>(<span class="ResWord">size_t</span> <span class="ID">len</span>, <span class="ResWord">const</span> <span class="ResWord">char</span> *<span class="ID">s</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_110"> 110</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_110"></span><span class="anchor" id="line-110-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_111"> 111</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_111"></span><span class="anchor" id="line-111-1"></span>    <span class="Comment">/* basic trick: stable sort of s gives successor indices */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_112"> 112</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_112"></span><span class="anchor" id="line-112-1"></span>    <span class="Comment">/* then we just thread through starting from the nul */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_113"> 113</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_113"></span><span class="anchor" id="line-113-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_114"> 114</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_114"></span><span class="anchor" id="line-114-1"></span>    <span class="ResWord">size_t</span> *<span class="ID">successor</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_115"> 115</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_115"></span><span class="anchor" id="line-115-1"></span>    <span class="ResWord">int</span> <span class="ID">c</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_116"> 116</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_116"></span><span class="anchor" id="line-116-1"></span>    <span class="ResWord">size_t</span> <span class="ID">count</span>[<span class="ID">UCHAR_MAX</span>+<span class="Number">1</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_117"> 117</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_117"></span><span class="anchor" id="line-117-1"></span>    <span class="ResWord">size_t</span> <span class="ID">offset</span>[<span class="ID">UCHAR_MAX</span>+<span class="Number">1</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_118"> 118</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_118"></span><span class="anchor" id="line-118-1"></span>    <span class="ResWord">size_t</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_119"> 119</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_119"></span><span class="anchor" id="line-119-1"></span>    <span class="ResWord">char</span> *<span class="ID">ret</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_120"> 120</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_120"></span><span class="anchor" id="line-120-1"></span>    <span class="ResWord">size_t</span> <span class="ResWord">thread</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_121"> 121</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_121"></span><span class="anchor" id="line-121-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_122"> 122</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_122"></span><span class="anchor" id="line-122-1"></span>    <span class="ID">successor</span> = <span class="ID">malloc</span>(<span class="ResWord">sizeof</span>(*<span class="ID">successor</span>) * <span class="ID">len</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_123"> 123</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_123"></span><span class="anchor" id="line-123-1"></span>    <span class="ID">assert</span>(<span class="ID">successor</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_124"> 124</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_124"></span><span class="anchor" id="line-124-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_125"> 125</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_125"></span><span class="anchor" id="line-125-1"></span>    <span class="Comment">/* counting sort */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_126"> 126</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_126"></span><span class="anchor" id="line-126-1"></span>    <span class="ResWord">for</span>(<span class="ID">c</span> = <span class="Number">0</span>; <span class="ID">c</span> &lt;= <span class="ID">UCHAR_MAX</span>; <span class="ID">c</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_127"> 127</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_127"></span><span class="anchor" id="line-127-1"></span>        <span class="ID">count</span>[<span class="ID">c</span>] = <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_128"> 128</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_128"></span><span class="anchor" id="line-128-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_129"> 129</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_129"></span><span class="anchor" id="line-129-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_130"> 130</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_130"></span><span class="anchor" id="line-130-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">len</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_131"> 131</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_131"></span><span class="anchor" id="line-131-1"></span>        <span class="ID">count</span>[(<span class="ResWord">unsigned</span> <span class="ResWord">char</span>) <span class="ID">s</span>[<span class="ID">i</span>]]++;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_132"> 132</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_132"></span><span class="anchor" id="line-132-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_133"> 133</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_133"></span><span class="anchor" id="line-133-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_134"> 134</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_134"></span><span class="anchor" id="line-134-1"></span>    <span class="ID">offset</span>[<span class="Number">0</span>] = <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_135"> 135</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_135"></span><span class="anchor" id="line-135-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_136"> 136</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_136"></span><span class="anchor" id="line-136-1"></span>    <span class="ResWord">for</span>(<span class="ID">c</span> = <span class="Number">1</span>; <span class="ID">c</span> &lt;= <span class="ID">UCHAR_MAX</span>; <span class="ID">c</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_137"> 137</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_137"></span><span class="anchor" id="line-137-1"></span>        <span class="ID">offset</span>[<span class="ID">c</span>] = <span class="ID">offset</span>[<span class="ID">c</span>-<span class="Number">1</span>] + <span class="ID">count</span>[<span class="ID">c</span>-<span class="Number">1</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_138"> 138</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_138"></span><span class="anchor" id="line-138-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_139"> 139</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_139"></span><span class="anchor" id="line-139-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_140"> 140</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_140"></span><span class="anchor" id="line-140-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">len</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_141"> 141</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_141"></span><span class="anchor" id="line-141-1"></span>        <span class="ID">successor</span>[<span class="ID">offset</span>[(<span class="ResWord">unsigned</span> <span class="ResWord">char</span>) <span class="ID">s</span>[<span class="ID">i</span>]]++] = <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_142"> 142</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_142"></span><span class="anchor" id="line-142-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_143"> 143</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_143"></span><span class="anchor" id="line-143-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_144"> 144</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_144"></span><span class="anchor" id="line-144-1"></span>    <span class="Comment">/* find the nul */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_145"> 145</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_145"></span><span class="anchor" id="line-145-1"></span>    <span class="ResWord">for</span>(<span class="ResWord">thread</span> = <span class="Number">0</span>; <span class="ID">s</span>[<span class="ResWord">thread</span>]; <span class="ResWord">thread</span>++);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_146"> 146</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_146"></span><span class="anchor" id="line-146-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_147"> 147</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_147"></span><span class="anchor" id="line-147-1"></span>    <span class="Comment">/* thread the result */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_148"> 148</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_148"></span><span class="anchor" id="line-148-1"></span>    <span class="ID">ret</span> = <span class="ID">malloc</span>(<span class="ID">len</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_149"> 149</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_149"></span><span class="anchor" id="line-149-1"></span>    <span class="ID">assert</span>(<span class="ID">ret</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_150"> 150</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_150"></span><span class="anchor" id="line-150-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_151"> 151</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_151"></span><span class="anchor" id="line-151-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>, <span class="ResWord">thread</span> = <span class="ID">successor</span>[<span class="ResWord">thread</span>]; <span class="ID">i</span> &lt; <span class="ID">len</span>; <span class="ID">i</span>++, <span class="ResWord">thread</span> = <span class="ID">successor</span>[<span class="ResWord">thread</span>]) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_152"> 152</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_152"></span><span class="anchor" id="line-152-1"></span>        <span class="ID">ret</span>[<span class="ID">i</span>] = <span class="ID">s</span>[<span class="ResWord">thread</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_153"> 153</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_153"></span><span class="anchor" id="line-153-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_154"> 154</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_154"></span><span class="anchor" id="line-154-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_155"> 155</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_155"></span><span class="anchor" id="line-155-1"></span>    <span class="ResWord">return</span> <span class="ID">ret</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-83725d8fcddb6fca77c800403345d4829d0bb14d_156"> 156</a> </span><span class="LineAnchor" id="CA-83725d8fcddb6fca77c800403345d4829d0bb14d_156"></span><span class="anchor" id="line-156-1"></span>}</span>
</pre></div></div><a class="attachment" href="attachments/SuffixArrays/suffixArray.c" title="attachment:suffixArray.c">suffixArray.c</a> <span class="anchor" id="line-264"></span><span class="anchor" id="line-265"></span><p class="line862">Here is a Makefile and test code: <a class="attachment" href="attachments/SuffixArrays/Makefile" title="">Makefile</a>, <a class="attachment" href="attachments/SuffixArrays/testSuffixArray.c" title="">testSuffixArray.c</a>. <span class="anchor" id="line-266"></span><span class="anchor" id="line-267"></span><p class="line862">The output of <tt class="backtick">make&nbsp;test</tt> shows all occurences of a target string, the Burrows-Wheeler transform of a the source string (second-to-last line), and its inversion (last line, which is just the original string): <span class="anchor" id="line-268"></span><span class="anchor" id="line-269"></span><span class="anchor" id="line-270"></span><span class="anchor" id="line-271"></span><span class="anchor" id="line-272"></span><span class="anchor" id="line-273"></span><span class="anchor" id="line-274"></span><span class="anchor" id="line-275"></span><span class="anchor" id="line-276"></span><span class="anchor" id="line-277"></span><span class="anchor" id="line-278"></span><span class="anchor" id="line-279"></span><span class="anchor" id="line-280"></span><pre><span class="anchor" id="SuffixArrays-1.line-1-4"></span>$ make test
<span class="anchor" id="SuffixArrays-1.line-2-4"></span>/bin/echo -n abracadabra-abracadabra-shmabracadabra | ./testSuffixArray abra
<span class="anchor" id="SuffixArrays-1.line-3-4"></span>Count: 6
<span class="anchor" id="SuffixArrays-1.line-4-4"></span>abra
<span class="anchor" id="SuffixArrays-1.line-5-4"></span>abra-abr
<span class="anchor" id="SuffixArrays-1.line-6-4"></span>abra-shm
<span class="anchor" id="SuffixArrays-1.line-7-4"></span>abracada
<span class="anchor" id="SuffixArrays-1.line-8-4"></span>abracada
<span class="anchor" id="SuffixArrays-1.line-9-4"></span>abracada
<span class="anchor" id="SuffixArrays-1.line-10-4"></span>aaarrrdddm\x00-rrrcccaaaaaaaaaaaashbbbbbb-
<span class="anchor" id="SuffixArrays-1.line-11-4"></span>abracadabra-abracadabra-shmabracadabra</pre><span class="anchor" id="line-281"></span><span class="anchor" id="line-282"></span><p class="line867"><hr /><p class="line874"> <span class="anchor" id="line-283"></span><a href="./CategoryProgrammingNotes.html">CategoryProgrammingNotes</a> <span class="anchor" id="line-284"></span><span class="anchor" id="bottom"></span></div>
</div>
<hr>
2014-06-17 11:58
</body>
</html>
